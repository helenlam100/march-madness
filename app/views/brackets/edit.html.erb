<html>
  <head>
    <title>Brackets</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.2/underscore-min.js"></script>
    <script src="https://code.jquery.com/jquery-1.11.2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.1/toastr.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/2.1.1/toastr.min.css"/>

    <style>

/**
 * jquery.bracket.css
 */

/*
 * jQuery Bracket
 *
 * Copyright (c) 2011-2013, Teijo Laine,
 * http://aropupu.fi/bracket/
 *
 * Licenced under the MIT licence
 */
/* line 20, ../src/jquery.bracket.sass */
div.jQBracket {
  font-family: "Arial";
  font-size: 14px;
  position: relative;
}
/* line 25, ../src/jquery.bracket.sass */
div.jQBracket .tools {
  position: absolute;
  top: 0px;
  color: white;
}
/* line 30, ../src/jquery.bracket.sass */
div.jQBracket .tools span {
  cursor: pointer;
  margin: 5px;
  display: block;
  text-align: center;
  width: 18px;
  height: 18px;
  background-color: #666666;
}
/* line 39, ../src/jquery.bracket.sass */
div.jQBracket .tools span:hover {
  background-color: #999999;
}
/* line 42, ../src/jquery.bracket.sass */
div.jQBracket .finals {
  float: right;
  right: 0px;
  clear: right;
  position: relative;
}
/* line 48, ../src/jquery.bracket.sass */
div.jQBracket .bracket {
  float: right;
  clear: left;
}
/* line 52, ../src/jquery.bracket.sass */
div.jQBracket .loserBracket {
  float: right;
  clear: left;
  position: relative;
}
/* line 57, ../src/jquery.bracket.sass */
div.jQBracket .round {
  position: relative;
  width: 100px;
  margin-right: 40px;
  float: left;
}
/* line 63, ../src/jquery.bracket.sass */
div.jQBracket .match {
  position: relative;
}
/* line 66, ../src/jquery.bracket.sass */
div.jQBracket .editable {
  cursor: pointer;
}
/* line 69, ../src/jquery.bracket.sass */
div.jQBracket .team {
  position: relative;
  z-index: 1;
  float: left;
  background-color: #eeeeee;
  width: 100px;
  cursor: default;
}
/* line 77, ../src/jquery.bracket.sass */
div.jQBracket .team:first-child {
  border-bottom: 1px solid #999999;
}
/* line 80, ../src/jquery.bracket.sass */
div.jQBracket .team input {
  font-size: 12px;
  padding: 0;
  width: inherit;
  border: none;
  margin: 0;
}
/* line 87, ../src/jquery.bracket.sass */
div.jQBracket .team div.label {
  color: #000 !important;
  padding: 3px;
  position: absolute;
  width: 70px;
  height: 22px;
  white-space: nowrap;
  overflow: hidden;
}
/* line 95, ../src/jquery.bracket.sass */
div.jQBracket .team div.label[disabled] {
  cursor: default;
}
/* line 98, ../src/jquery.bracket.sass */
div.jQBracket .team div.score {
  float: right;
  padding: 3px;
  background-color: rgba(255, 255, 255, 0.3);
  text-align: center;
  width: 20px;
}
/* line 105, ../src/jquery.bracket.sass */
div.jQBracket .team div.score[disabled] {
  color: #999999;
  cursor: default;
}
/* line 109, ../src/jquery.bracket.sass */
div.jQBracket .team div.label input.error,
div.jQBracket .team div.score input.error {
  background-color: #ffcccc;
}
/* line 113, ../src/jquery.bracket.sass */
div.jQBracket .team.np {
  background-color: #666666;
  color: #eeeeee;
}
/* line 117, ../src/jquery.bracket.sass */
div.jQBracket .team.na {
  background-color: #999999;
  color: #cccccc;
}
/* line 121, ../src/jquery.bracket.sass */
div.jQBracket .team.win {
  color: #333333;
}
/* line 124, ../src/jquery.bracket.sass */
div.jQBracket .team.win div.score {
  color: #006600;
}
/* line 127, ../src/jquery.bracket.sass */
div.jQBracket .team.lose div.score {
  color: #990000;
}
/* line 130, ../src/jquery.bracket.sass */
div.jQBracket .team.lose {
  background-color: #dddddd;
  color: #999999;
}
/* line 134, ../src/jquery.bracket.sass */
div.jQBracket .team.tie div.score {
  color: blue;
}
/* line 137, ../src/jquery.bracket.sass */
div.jQBracket .team.highlightWinner {
  background-color: #ddaa00;
  color: black;
}
/* line 141, ../src/jquery.bracket.sass */
div.jQBracket .team.highlightLoser {
  background-color: #cccccc;
  color: black;
}
/* line 145, ../src/jquery.bracket.sass */
div.jQBracket .team.highlight {
  background-color: #33cc00;
  color: black;
}
/* line 149, ../src/jquery.bracket.sass */
div.jQBracket .teamContainer {
  z-index: 1;
  position: relative;
  float: left;
}
/* line 154, ../src/jquery.bracket.sass */
div.jQBracket .connector {
  border: 2px solid #666666;
  border-left-style: none;
  position: absolute;
  z-index: 1;
}
/* line 160, ../src/jquery.bracket.sass */
div.jQBracket .connector div.connector {
  border: none;
  border-bottom: 2px solid #666666;
  height: 0px;
  position: absolute;
}
/* line 166, ../src/jquery.bracket.sass */
div.jQBracket .connector.highlightWinner,
div.jQBracket .connector div.connector.highlightWinner {
  border-color: #ddaa00;
}
/* line 170, ../src/jquery.bracket.sass */
div.jQBracket .connector.highlightLoser,
div.jQBracket .connector div.connector.highlightLoser {
  border-color: #cccccc;
}
/* line 174, ../src/jquery.bracket.sass */
div.jQBracket .connector.highlight,
div.jQBracket .connector div.connector.highlight {
  border-color: #00cc00;
}
/* line 178, ../src/jquery.bracket.sass */
div.jQBracket .np .connector,
div.jQBracket .np .connector div.connector {
  border-color: #222222;
}
/* line 182, ../src/jquery.bracket.sass */
div.jQBracket .bubble {
  height: 22px;
  line-height: 22px;
  width: 30px;
  right: -35px;
  position: absolute;
  text-align: center;
  font-size: 11px;
}
/* line 191, ../src/jquery.bracket.sass */
div.jQBracket .bubble.third {
  background-color: #996633;
  color: #dd9955;
}
/* line 195, ../src/jquery.bracket.sass */
div.jQBracket .bubble.fourth {
  background-color: #667788;
  color: #ccccdd;
}
/* line 199, ../src/jquery.bracket.sass */
div.jQBracket .bubble:after {
  content: "";
  position: absolute;
  top: 6px;
  width: 0;
  height: 0;
  border-top: 5px solid transparent;
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-bottom: 5px solid transparent;
}
/* line 210, ../src/jquery.bracket.sass */
div.jQBracket .bubble:after {
  left: -5px;
  border-left: 0;
}
/* line 213, ../src/jquery.bracket.sass */
div.jQBracket .bubble.third:after {
  border-right: 6px solid #996633;
}
/* line 215, ../src/jquery.bracket.sass */
div.jQBracket .bubble.fourth:after {
  border-right: 6px solid #667788;
}
/* line 219, ../src/jquery.bracket.sass */
div.jQBracket .highlightWinner .bubble {
  background-color: #ddaa00;
  color: #996600;
}
/* line 222, ../src/jquery.bracket.sass */
div.jQBracket .highlightWinner .bubble:after {
  border-right-color: #ddaa00;
}
/* line 226, ../src/jquery.bracket.sass */
div.jQBracket .highlightLoser .bubble {
  background-color: #cccccc;
  color: #333333;
}
/* line 229, ../src/jquery.bracket.sass */
div.jQBracket .highlightLoser .bubble:after {
  border-right-color: #cccccc;
}

/* line 233, ../src/jquery.bracket.sass */
div.jQBracket.rl .finals {
  float: left;
  left: 0px;
  clear: left;
}
/* line 238, ../src/jquery.bracket.sass */
div.jQBracket.rl .bracket {
  float: left;
  clear: right;
}
/* line 242, ../src/jquery.bracket.sass */
div.jQBracket.rl .loserBracket {
  float: left;
  clear: right;
}
/* line 246, ../src/jquery.bracket.sass */
div.jQBracket.rl .round {
  margin-right: 0;
  margin-left: 40px;
  float: right;
}
/* line 251, ../src/jquery.bracket.sass */
div.jQBracket.rl .team {
  float: right;
}
/* line 254, ../src/jquery.bracket.sass */
div.jQBracket.rl .team div.label {
  right: 0;
}
/* line 257, ../src/jquery.bracket.sass */
div.jQBracket.rl .team div.score {
  float: left;
}
/* line 260, ../src/jquery.bracket.sass */
div.jQBracket.rl .teamContainer {
  float: right;
}
/* line 263, ../src/jquery.bracket.sass */
div.jQBracket.rl .connector {
  border-left-style: solid;
  border-right-style: none;
  border-width: 2px;
}
/* line 267, ../src/jquery.bracket.sass */
div.jQBracket.rl .connector.highlightWinner,
div.jQBracket.rl .connector div.connector.highlightWinner {
  border-color: #ddaa00;
}
/* line 271, ../src/jquery.bracket.sass */
div.jQBracket.rl .connector.highlightLoser,
div.jQBracket.rl .connector div.connector.highlightLoser {
  border-color: #cccccc;
}
/* line 275, ../src/jquery.bracket.sass */
div.jQBracket.rl .connector.highlight,
div.jQBracket.rl .connector div.connector.highlight {
  border-color: #00cc00;
}
/* line 279, ../src/jquery.bracket.sass */
div.jQBracket.rl .bubble {
  left: -35px;
}
/* line 282, ../src/jquery.bracket.sass */
div.jQBracket.rl .bubble.third {
  background-color: #996633;
  color: #331100;
}
/* line 286, ../src/jquery.bracket.sass */
div.jQBracket.rl .bubble.fourth {
  background-color: #667788;
  color: #ccccdd;
}
/* line 290, ../src/jquery.bracket.sass */
div.jQBracket.rl .bubble:after {
  left: auto;
  right: -5px;
  border-left: 5px solid transparent;
  border-right: 0;
}
/* line 295, ../src/jquery.bracket.sass */
div.jQBracket.rl .bubble.third:after {
  border-right: none;
  border-left: 6px solid #996633;
}
/* line 298, ../src/jquery.bracket.sass */
div.jQBracket.rl .bubble.fourth:after {
  border-right: none;
  border-left: 6px solid #667788;
}
/* line 304, ../src/jquery.bracket.sass */
div.jQBracket.rl .highlightWinner .bubble:after {
  border-left-color: #ddaa00;
}
/* line 309, ../src/jquery.bracket.sass */
div.jQBracket.rl .highlightLoser .bubble:after {
  border-left-color: #cccccc;
}

    </style>


    <style>

/**
 * brackets.css
 */

#save {
  margin-top: 10px;
}

.bracket {
  margin-top: 50px;
  margin-bottom: 50px;
}

    </style>



    <script>

/**
 * jquery.bracket.js
 */

(function ($) {
    function isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }

    function depth(a) {
        function df(a, d) {
            if (a instanceof Array)
                return df(a[0], d + 1);
            return d;
        }

        return df(a, 0);
    }

    function wrap(a, d) {
        if (d > 0)
            a = wrap([a], d - 1);
        return a;
    }

    function emptyTeam() {
        return { source: null, name: null, id: -1, idx: -1, score: null };
    }

    function teamsInResultOrder(match) {
        if (isNumber(match.a.score) && isNumber(match.b.score)) {
            if (match.a.score > match.b.score)
                return [match.a, match.b];
            else if (match.a.score < match.b.score)
                return [match.b, match.a];
        }
        return [];
    }

    function matchWinner(match) {
        return teamsInResultOrder(match)[0] || emptyTeam();
    }

    function matchLoser(match) {
        return teamsInResultOrder(match)[1] || emptyTeam();
    }

    function trackHighlighter(teamIndex, cssClass, container) {
        var elements = container.find('.team[data-teamid=' + teamIndex + ']');
        var addedClass;
        if (!cssClass)
            addedClass = 'highlight';
        else
            addedClass = cssClass;

        return {
            highlight: function () {
                elements.each(function () {
                    $(this).addClass(addedClass);

                    if ($(this).hasClass('win'))
                        $(this).parent().find('.connector').addClass(addedClass);
                });
            },
            deHighlight: function () {
                elements.each(function () {
                    $(this).removeClass(addedClass);
                    $(this).parent().find('.connector').removeClass(addedClass);
                });
            }
        };
    }

    function postProcess(container, w, f) {
        var source = f || w;

        var winner = source.winner();
        var loser = source.loser();

        var winTrack = null;
        var loseTrack = null;

        if (winner && loser) {
            winTrack = trackHighlighter(winner.idx, 'highlightWinner', container);
            loseTrack = trackHighlighter(loser.idx, 'highlightLoser', container);
            winTrack.highlight();
            loseTrack.highlight();
        }

        container.find('.team').mouseover(function () {
            var i = $(this).attr('data-teamid');
            var track = trackHighlighter(i, null, container);
            track.highlight();
            $(this).mouseout(function () {
                track.deHighlight();
                $(this).unbind('mouseout');
            });
        });
    }

    function defaultEdit(span, data, done) {
        var input = $('<input type="text">');
        input.val(data);
        span.html(input);
        input.focus();
        input.blur(function () {
            done(input.val());
        });
        input.keydown(function (e) {
            var key = (e.keyCode || e.which);
            if (key === 9 || key === 13 || key === 27) {
                e.preventDefault();
                done(input.val(), (key !== 27));
            }
        });
    }

    function defaultRender(container, team, score) {
        container.append(team);
    }

    function winnerBubbles(match) {
        var el = match.el;
        var winner = el.find('.team.win');
        winner.append('<div class="bubble">1st</div>');
        var loser = el.find('.team.lose');
        loser.append('<div class="bubble">2nd</div>');
        return true;
    }

    function consolationBubbles(match) {
        var el = match.el;
        var winner = el.find('.team.win');
        winner.append('<div class="bubble third">3rd</div>');
        var loser = el.find('.team.lose');
        loser.append('<div class="bubble fourth">4th</div>');
        return true;
    }

    function prepareWinners(winners, teams, isSingleElimination, skipConsolationRound) {
        var rounds = Math.log(teams.length * 2) / Math.log(2);
        var matches = teams.length;
        var round;

        for (var r = 0; r < rounds; r += 1) {
            round = winners.addRound();

            for (var m = 0; m < matches; m += 1) {
                var teamCb = null;

                if (r === 0) {
                    teamCb = function () {
                        var t = teams[m];
                        var i = m;
                        return [
                            { source: function () {
                                    return { name: t[0], idx: (i * 2) };
                                } },
                            { source: function () {
                                    return { name: t[1], idx: (i * 2 + 1) };
                                } }
                        ];
                    };
                }

                if (!(r === rounds - 1 && isSingleElimination)) {
                    round.addMatch(teamCb);
                } else {
                    var match = round.addMatch(teamCb, winnerBubbles);
                    match.setAlignCb(function (tC) {
                        tC.css('top', '');
                        tC.css('position', 'absolute');
                        if (skipConsolationRound)
                            tC.css('top', (match.el.height() / 2 - tC.height() / 2) + 'px');
                        else
                            tC.css('bottom', (-tC.height() / 2) + 'px');
                    });
                }
            }
            matches /= 2;
        }

        if (isSingleElimination) {
            winners.final().connectorCb(function () {
                return null;
            });

            if (teams.length > 1 && !skipConsolationRound) {
                var third = winners.final().round().prev().match(0).loser;
                var fourth = winners.final().round().prev().match(1).loser;
                var consol = round.addMatch(function () {
                    return [
                        { source: third },
                        { source: fourth }
                    ];
                }, consolationBubbles);

                consol.setAlignCb(function (tC) {
                    var height = (winners.el.height()) / 2;
                    consol.el.css('height', (height) + 'px');

                    var topShift = tC.height();

                    tC.css('top', (topShift) + 'px');
                });

                consol.connectorCb(function () {
                    return null;
                });
            }
        }
    }

    function prepareLosers(winners, losers, teamCount) {
        var rounds = Math.log(teamCount * 2) / Math.log(2) - 1;
        var matches = teamCount / 2;

        for (var r = 0; r < rounds; r += 1) {
            for (var n = 0; n < 2; n += 1) {
                var round = losers.addRound();

                for (var m = 0; m < matches; m += 1) {
                    var teamCb = null;

                    if (!(n % 2 === 0 && r !== 0)) {
                        teamCb = function () {
                            if (n % 2 === 0 && r === 0) {
                                return [
                                    { source: winners.round(0).match(m * 2).loser },
                                    { source: winners.round(0).match(m * 2 + 1).loser }
                                ];
                            } else {
                                var winnerMatch = m;

                                if (r % 2 === 0)
                                    winnerMatch = matches - m - 1;
                                return [
                                    { source: losers.round(r * 2).match(m).winner },
                                    { source: winners.round(r + 1).match(winnerMatch).loser }
                                ];
                            }
                        };
                    }

                    var match = round.addMatch(teamCb);
                    var teamCon = match.el.find('.teamContainer');
                    match.setAlignCb(function () {
                        teamCon.css('top', (match.el.height() / 2 - teamCon.height() / 2) + 'px');
                    });

                    if (r < rounds - 1 || n < 1) {
                        var cb = null;

                        if (n % 2 === 0) {
                            cb = function (tC, match) {
                                var connectorOffset = tC.height() / 4;
                                var height = 0;
                                var shift = 0;

                                if (match.winner().id === 0) {
                                    shift = connectorOffset;
                                } else if (match.winner().id === 1) {
                                    height = -connectorOffset * 2;
                                    shift = connectorOffset;
                                } else {
                                    shift = connectorOffset * 2;
                                }
                                return { height: height, shift: shift };
                            };
                        }
                        match.connectorCb(cb);
                    }
                }
            }
            matches /= 2;
        }
    }

    function prepareFinals(finals, winners, losers, skipSecondaryFinal, skipConsolationRound, topCon) {
        var round = finals.addRound();
        var match = round.addMatch(function () {
            return [
                { source: winners.winner },
                { source: losers.winner }
            ];
        }, function (match) {
            var _isResized = false;

            if (!skipSecondaryFinal && (match.winner().name !== null && match.winner().name === losers.winner().name)) {
                if (finals.size() === 2)
                    return;

                var round = finals.addRound(function () {
                    var rematch = ((match.winner().name !== null && match.winner().name === losers.winner().name));
                    if (_isResized === false) {
                        if (rematch) {
                            _isResized = true;
                            topCon.css('width', (parseInt(topCon.css('width'), 10) + 140) + 'px');
                        }
                    }
                    if (!rematch && _isResized) {
                        _isResized = false;
                        finals.dropRound();
                        topCon.css('width', (parseInt(topCon.css('width'), 10) - 140) + 'px');
                    }
                    return rematch;
                });

                var match2 = round.addMatch(function () {
                    return [
                        { source: match.first },
                        { source: match.second }
                    ];
                }, winnerBubbles);

                match.connectorCb(function (tC) {
                    return { height: 0, shift: tC.height() / 2 };
                });

                match2.connectorCb(function () {
                    return null;
                });
                match2.setAlignCb(function (tC) {
                    var height = (winners.el.height() + losers.el.height());
                    match2.el.css('height', (height) + 'px');

                    var topShift = (winners.el.height() / 2 + winners.el.height() + losers.el.height() / 2) / 2 - tC.height();

                    tC.css('top', (topShift) + 'px');
                });
                return false;
            } else {
                return winnerBubbles(match);
            }
        });

        match.setAlignCb(function (tC) {
            var height = (winners.el.height() + losers.el.height());
            if (!skipConsolationRound)
                height /= 2;
            match.el.css('height', (height) + 'px');

            var topShift = (winners.el.height() / 2 + winners.el.height() + losers.el.height() / 2) / 2 - tC.height();

            tC.css('top', (topShift) + 'px');
        });

        var shift;
        var height;

        if (!skipConsolationRound) {
            var fourth = losers.final().round().prev().match(0).loser;
            var consol = round.addMatch(function () {
                return [
                    { source: fourth },
                    { source: losers.loser }
                ];
            }, consolationBubbles);
            consol.setAlignCb(function (tC) {
                var height = (winners.el.height() + losers.el.height()) / 2;
                consol.el.css('height', (height) + 'px');

                var topShift = (winners.el.height() / 2 + winners.el.height() + losers.el.height() / 2) / 2 + tC.height() / 2 - height;

                tC.css('top', (topShift) + 'px');
            });

            match.connectorCb(function () {
                return null;
            });
            consol.connectorCb(function () {
                return null;
            });
        }

        winners.final().connectorCb(function (tC) {
            var connectorOffset = tC.height() / 4;
            var topShift = (winners.el.height() / 2 + winners.el.height() + losers.el.height() / 2) / 2 - tC.height() / 2;
            var matchupOffset = topShift - winners.el.height() / 2;
            if (winners.winner().id === 0) {
                height = matchupOffset + connectorOffset * 2;
                shift = connectorOffset;
            } else if (winners.winner().id === 1) {
                height = matchupOffset;
                shift = connectorOffset * 3;
            } else {
                height = matchupOffset + connectorOffset;
                shift = connectorOffset * 2;
            }
            height -= tC.height() / 2;
            return { height: height, shift: shift };
        });

        losers.final().connectorCb(function (tC) {
            var connectorOffset = tC.height() / 4;
            var topShift = (winners.el.height() / 2 + winners.el.height() + losers.el.height() / 2) / 2 - tC.height() / 2;
            var matchupOffset = topShift - winners.el.height() / 2;
            if (losers.winner().id === 0) {
                height = matchupOffset;
                shift = connectorOffset * 3;
            } else if (losers.winner().id === 1) {
                height = matchupOffset + connectorOffset * 2;
                shift = connectorOffset;
            } else {
                height = matchupOffset + connectorOffset;
                shift = connectorOffset * 2;
            }
            height += tC.height() / 2;
            return { height: -height, shift: -shift };
        });
    }

    function mkRound(bracket, previousRound, roundIdx, results, doRenderCb, mkMatch) {
        var matches = [];
        var roundCon = $('<div class="round"></div>');

        return {
            el: roundCon,
            bracket: bracket,
            id: roundIdx,
            addMatch: function (teamCb, renderCb) {
                var matchIdx = matches.length;
                var teams;

                if (teamCb !== null)
                    teams = teamCb();
                else
                    teams = [
                        { source: bracket.round(roundIdx - 1).match(matchIdx * 2).winner },
                        { source: bracket.round(roundIdx - 1).match(matchIdx * 2 + 1).winner }
                    ];

                var match = mkMatch(this, teams, matchIdx, !results ? null : results[matchIdx], renderCb);
                matches.push(match);
                return match;
            },
            match: function (id) {
                return matches[id];
            },
            prev: function () {
                return previousRound;
            },
            size: function () {
                return matches.length;
            },
            render: function () {
                roundCon.empty();
                if (typeof (doRenderCb) === 'function')
                    if (!doRenderCb())
                        return;
                roundCon.appendTo(bracket.el);
                $.each(matches, function (i, ma) {
                    ma.render();
                });
            },
            results: function () {
                var results = [];
                $.each(matches, function (i, ma) {
                    results.push(ma.results());
                });
                return results;
            }
        };
    }

    function mkBracket(bracketCon, results, mkMatch) {
        var rounds = [];

        return {
            el: bracketCon,
            addRound: function (doRenderCb) {
                var id = rounds.length;
                var previous = null;
                if (id > 0)
                    previous = rounds[id - 1];

                var round = mkRound(this, previous, id, !results ? null : results[id], doRenderCb, mkMatch);
                rounds.push(round);
                return round;
            },
            dropRound: function () {
                rounds.pop();
            },
            round: function (id) {
                return rounds[id];
            },
            size: function () {
                return rounds.length;
            },
            final: function () {
                return rounds[rounds.length - 1].match(0);
            },
            winner: function () {
                return rounds[rounds.length - 1].match(0).winner();
            },
            loser: function () {
                return rounds[rounds.length - 1].match(0).loser();
            },
            render: function () {
                bracketCon.empty();

                for (var i = 0; i < rounds.length; i += 1)
                    rounds[i].render();
            },
            results: function () {
                var results = [];
                $.each(rounds, function (i, ro) {
                    results.push(ro.results());
                });
                return results;
            }
        };
    }

    function connector(height, shift, teamCon, align) {
        var width = parseInt($('.round:first').css('margin-right'), 10) / 2;
        var drop = true;

        if (height < 0) {
            drop = false;
            height = -height;
        }

        if (height < 2)
            height = 0;

        var src = $('<div class="connector"></div>').appendTo(teamCon);
        src.css('height', height);
        src.css('width', width + 'px');
        src.css(align, (-width - 2) + 'px');

        if (shift >= 0)
            src.css('top', shift + 'px');
        else
            src.css('bottom', (-shift) + 'px');

        if (drop)
            src.css('border-bottom', 'none');
        else
            src.css('border-top', 'none');

        var dst = $('<div class="connector"></div>').appendTo(src);
        dst.css('width', width + 'px');
        dst.css(align, -width + 'px');
        if (drop)
            dst.css('bottom', '0px');
        else
            dst.css('top', '0px');

        return src;
    }

    function embedEditButtons(topCon, data, opts) {
        var tools = $('<div class="tools"></div>').appendTo(topCon);
        var inc = $('<span class="increment">+</span>').appendTo(tools);
        inc.click(function () {
            var i;
            var len = data.teams.length;
            for (i = 0; i < len; i += 1)
                data.teams.push(['', '']);
            return JqueryBracket(opts);
        });

        if (data.teams.length > 1 && data.results.length === 1 || data.teams.length > 2 && data.results.length === 3) {
            var dec = $('<span class="decrement">-</span>').appendTo(tools);
            dec.click(function () {
                if (data.teams.length > 1) {
                    data.teams = data.teams.slice(0, data.teams.length / 2);
                    return JqueryBracket(opts);
                }
            });
        }

        var type;
        if (data.results.length === 1 && data.teams.length > 1) {
            type = $('<span class="doubleElimination">de</span>').appendTo(tools);
            type.click(function () {
                if (data.teams.length > 1 && data.results.length < 3) {
                    data.results.push([], []);
                    return JqueryBracket(opts);
                }
            });
        } else if (data.results.length === 3 && data.teams.length > 1) {
            type = $('<span class="singleElimination">se</span>').appendTo(tools);
            type.click(function () {
                if (data.results.length === 3) {
                    data.results = data.results.slice(0, 1);
                    return JqueryBracket(opts);
                }
            });
        }
    }

    var JqueryBracket = function (opts) {
        var align = opts.dir === 'lr' ? 'right' : 'left';
        var resultIdentifier;

        if (!opts)
            throw Error('Options not set');
        if (!opts.el)
            throw Error('Invalid jQuery object as container');
        if (!opts.init && !opts.save)
            throw Error('No bracket data or save callback given');
        if (opts.userData === undefined)
            opts.userData = null;

        if (opts.decorator && (!opts.decorator.edit || !opts.decorator.render))
            throw Error('Invalid decorator input');
        else if (!opts.decorator)
            opts.decorator = { edit: defaultEdit, render: defaultRender };

        var data;
        if (!opts.init)
            opts.init = {
                teams: [
                    ['', '']
                ],
                results: [] };

        data = opts.init;

        var topCon = $('<div class="jQBracket ' + opts.dir + '"></div>').appendTo(opts.el.empty());

        function renderAll(save) {
            resultIdentifier = 0;
            w.render();
            if (l && f) {
                l.render();
                f.render();
            }
            postProcess(topCon, w, f);

            if (save) {
                data.results[0] = w.results();
                if (l && f) {
                    data.results[1] = l.results();
                    data.results[2] = f.results();
                }
                if (opts.save)
                    opts.save(data, opts.userData);
            }
        }

        function mkMatch(round, data, idx, results, renderCb) {
            var match = { a: data[0], b: data[1] };
            function teamElement(round, team, otherTeam, isReady) {
                var rId = resultIdentifier;
                var sEl = $('<div class="score" data-resultid="result-' + rId + '"></div>');
                var score = '--';
                //if (!team.name || !isReady) {
                //    score = '--';
                //} else {
                //    if (!isNumber(team.score)) {
                //        score = '--';
                //    } else {
                //        score = team.score;
                //    }
                //}
                sEl.append(score);

                resultIdentifier += 1;

                var name = !team.name ? '--' : team.name;
                var tEl = $('<div class="team"></div>');
                var nEl = $('<div class="label"></div>').appendTo(tEl);

                if (round === 0)
                    tEl.attr('data-resultid', 'team-' + rId);

                opts.decorator.render(nEl, name, score);

                if (isNumber(team.idx))
                    tEl.attr('data-teamid', team.idx);

                if (team.name === null)
                    tEl.addClass('na');
                else if (matchWinner(match).name === team.name)
                    tEl.addClass('win');
                else if (matchLoser(match).name === team.name)
                    tEl.addClass('lose');

                tEl.append(sEl);

                if (!(team.name === null || !isReady || !opts.save) && opts.save) {
                    nEl.click(function (e) {
                        team.score = 1;
                        otherTeam.score = 0;
                        renderAll(true);
                    });
                    //nEl.addClass('editable');
                    //nEl.click(function () {
                    //    var span = $(this);

                    //    function editor() {
                    //        function done_fn(val, next) {
                    //            if (val)
                    //                opts.init.teams[~~(team.idx / 2)][team.idx % 2] = val;
                    //            renderAll(true);
                    //            span.click(editor);
                    //            var labels = opts.el.find('.team[data-teamid=' + (team.idx + 1) + '] div.label:first');
                    //            if (labels.length && next === true && round === 0)
                    //                $(labels).click();
                    //        }

                    //        span.unbind();
                    //        opts.decorator.edit(span, team.name, done_fn);
                    //    }

                    //    editor();
                    //});
                    //if (team.name) {
                    //    sEl.addClass('editable');
                    //    sEl.click(function () {
                    //        var span = $(this);

                    //        function editor() {
                    //            span.unbind();

                    //            var score;
                    //            if (!isNumber(team.score))
                    //                score = '0';
                    //            else
                    //                score = span.text();

                    //            var input = $('<input type="text">');
                    //            input.val(score);
                    //            span.html(input);

                    //            input.focus().select();
                    //            input.keydown(function (e) {
                    //                if (!isNumber($(this).val()))
                    //                    $(this).addClass('error');
                    //                else
                    //                    $(this).removeClass('error');

                    //                var key = (e.keyCode || e.which);
                    //                if (key === 9 || key === 13 || key === 27) {
                    //                    e.preventDefault();
                    //                    $(this).blur();
                    //                    if (key === 27)
                    //                        return;

                    //                    var next = topCon.find('div.score[data-resultid=result-' + (rId + 1) + ']');
                    //                    if (next)
                    //                        next.click();
                    //                }
                    //            });
                    //            input.blur(function () {
                    //                var val = input.val();
                    //                if ((!val || !isNumber(val)) && !isNumber(team.score))
                    //                    val = '0';
                    //                else if ((!val || !isNumber(val)) && isNumber(team.score))
                    //                    val = team.score;

                    //                span.html(val);
                    //                if (isNumber(val) && score !== parseInt(val, 10)) {
                    //                    team.score = parseInt(val, 10);
                    //                    renderAll(true);
                    //                }
                    //                span.click(editor);
                    //            });
                    //        }

                    //        editor();
                    //    });
                    //}
                }
                return tEl;
            }

            var connectorCb = null;
            var alignCb = null;

            var matchCon = $('<div class="match"></div>');
            var teamCon = $('<div class="teamContainer"></div>');

            if (!opts.save) {
                var matchUserData = (results ? results[2] : null);

                if (opts.onMatchHover)
                    teamCon.hover(function () {
                        opts.onMatchHover(matchUserData, true);
                    }, function () {
                        opts.onMatchHover(matchUserData, false);
                    });

                if (opts.onMatchClick)
                    teamCon.click(function () {
                        opts.onMatchClick(matchUserData);
                    });
            }

            match.a.id = 0;
            match.b.id = 1;

            match.a.name = match.a.source().name;
            match.b.name = match.b.source().name;

            match.a.score = !results ? null : results[0];
            match.b.score = !results ? null : results[1];

            if ((!match.a.name || !match.b.name) && (isNumber(match.a.score) || isNumber(match.b.score))) {
                console.log('ERROR IN SCORE DATA: ' + match.a.source().name + ': ' + match.a.score + ', ' + match.b.source().name + ': ' + match.b.score);
                match.a.score = match.b.score = null;
            }

            return {
                el: matchCon,
                id: idx,
                round: function () {
                    return round;
                },
                connectorCb: function (cb) {
                    connectorCb = cb;
                },
                connect: function (cb) {
                    var connectorOffset = teamCon.height() / 4;
                    var matchupOffset = matchCon.height() / 2;
                    var shift;
                    var height;

                    if (!cb || cb === null) {
                        if (idx % 2 === 0) {
                            if (this.winner().id === 0) {
                                shift = connectorOffset;
                                height = matchupOffset;
                            } else if (this.winner().id === 1) {
                                shift = connectorOffset * 3;
                                height = matchupOffset - connectorOffset * 2;
                            } else {
                                shift = connectorOffset * 2;
                                height = matchupOffset - connectorOffset;
                            }
                        } else {
                            if (this.winner().id === 0) {
                                shift = -connectorOffset * 3;
                                height = -matchupOffset + connectorOffset * 2;
                            } else if (this.winner().id === 1) {
                                shift = -connectorOffset;
                                height = -matchupOffset;
                            } else {
                                shift = -connectorOffset * 2;
                                height = -matchupOffset + connectorOffset;
                            }
                        }
                    } else {
                        var info = cb(teamCon, this);
                        if (info === null)
                            return;
                        shift = info.shift;
                        height = info.height;
                    }
                    teamCon.append(connector(height, shift, teamCon, align));
                },
                winner: function () {
                    return matchWinner(match);
                },
                loser: function () {
                    return matchLoser(match);
                },
                first: function () {
                    return match.a;
                },
                second: function () {
                    return match.b;
                },
                setAlignCb: function (cb) {
                    alignCb = cb;
                },
                render: function () {
                    matchCon.empty();
                    teamCon.empty();

                    match.a.name = match.a.source().name;
                    match.b.name = match.b.source().name;
                    match.a.idx = match.a.source().idx;
                    match.b.idx = match.b.source().idx;

                    var isReady = false;
                    if ((match.a.name || match.a.name === '') && (match.b.name || match.b.name === ''))
                        isReady = true;

                    if (!matchWinner(match).name)
                        teamCon.addClass('np');
                    else
                        teamCon.removeClass('np');

                    teamCon.append(teamElement(round.id, match.a, match.b, isReady));
                    teamCon.append(teamElement(round.id, match.b, match.a, isReady));

                    matchCon.appendTo(round.el);
                    matchCon.append(teamCon);

                    this.el.css('height', (round.bracket.el.height() / round.size()) + 'px');
                    teamCon.css('top', (this.el.height() / 2 - teamCon.height() / 2) + 'px');

                    if (alignCb)
                        alignCb(teamCon);

                    var isLast = false;
                    if (typeof (renderCb) === 'function')
                        isLast = renderCb(this);

                    if (!isLast)
                        this.connect(connectorCb);
                },
                results: function () {
                    return [match.a.score, match.b.score];
                }
            };
        }

        function isValid(data) {
            var t = data.teams;
            var r = data.results;

            if (!t) {
                console.log('no teams', data);
                return false;
            }

            if (!r)
                return true;

            if (t.length < r[0][0].length) {
                console.log('more results than teams', data);
                return false;
            }

            for (var b = 0; b < r.length; b += 1) {
                for (var i = 0; i < ~~(r[b].length / 2); i += 1) {
                    if (r[b][2 * i].length < r[b][2 * i + 1].length) {
                        console.log('previous round has less scores than next one', data);
                        return false;
                    }
                }
            }

            for (var i = 0; i < r[0].length; i += 1) {
                if (!r[1] || !r[1][i * 2])
                    break;

                if (r[0][i].length <= r[1][i * 2].length) {
                    console.log('lb has more results than wb', data);
                    return false;
                }
            }

            try  {
                $.each(r, function (i, br) {
                    $.each(br, function (i, ro) {
                        $.each(ro, function (i, ma) {
                            if (ma.length !== 2) {
                                console.log('match size not valid', ma);
                                throw 'match size not valid';
                            }

                            if (!(isNumber(ma[0]) ? isNumber(ma[1]) : !isNumber(ma[1]))) {
                                console.log('mixed results', ma);
                                throw 'mixed results';
                            }
                        });
                    });
                });
            } catch (e) {
                console.log(e);
                return false;
            }

            return true;
        }

        var w, l, f;

        var r = data.results;

        r = wrap(r, 4 - depth(r));
        data.results = r;

        var isSingleElimination = (r.length <= 1);

        if (opts.skipSecondaryFinal && isSingleElimination)
            $.error('skipSecondaryFinal setting is viable only in double elimination mode');

        //if (opts.save)
        //    embedEditButtons(topCon, data, opts);

        var fEl, wEl, lEl;

        if (isSingleElimination) {
            wEl = $('<div class="bracket"></div>').appendTo(topCon);
        } else {
            fEl = $('<div class="finals"></div>').appendTo(topCon);
            wEl = $('<div class="bracket"></div>').appendTo(topCon);
            lEl = $('<div class="loserBracket"></div>').appendTo(topCon);
        }

        var height = data.teams.length * 64;

        wEl.css('height', height);

        if (isSingleElimination && data.teams.length <= 2 && !opts.skipConsolationRound) {
            height += 40;
            topCon.css('height', height);
        }

        if (lEl)
            lEl.css('height', wEl.height() / 2);

        var rounds;
        if (isSingleElimination)
            rounds = Math.log(data.teams.length * 2) / Math.log(2);
        else
            rounds = (Math.log(data.teams.length * 2) / Math.log(2) - 1) * 2 + 1;

        if (opts.save)
            topCon.css('width', rounds * 140 + 40);
        else
            topCon.css('width', rounds * 140 + 10);

        w = mkBracket(wEl, !r || !r[0] ? null : r[0], mkMatch);

        if (!isSingleElimination) {
            l = mkBracket(lEl, !r || !r[1] ? null : r[1], mkMatch);
            f = mkBracket(fEl, !r || !r[2] ? null : r[2], mkMatch);
        }

        prepareWinners(w, data.teams, isSingleElimination, opts.skipConsolationRound);

        if (!isSingleElimination) {
            prepareLosers(w, l, data.teams.length);
            prepareFinals(f, w, l, opts.skipSecondaryFinal, opts.skipConsolationRound, topCon);
        }

        renderAll(false);

        return {
            data: function () {
                return opts.init;
            }
        };
    };

    var methods = {
        init: function (opts) {
            var that = this;
            opts.el = this;
            if (opts.save && (opts.onMatchClick || opts.onMatchHover))
                $.error('Match callbacks may not be passed in edit mode (in conjunction with save callback)');
            opts.dir = opts.dir || 'lr';
            opts.init.teams = !opts.init.teams || opts.init.teams.length == 0 ? [["", ""]] : opts.init.teams;
            opts.skipConsolationRound = opts.skipConsolationRound || false;
            opts.skipSecondaryFinal = opts.skipSecondaryFinal || false;
            if (opts.dir !== 'lr' && opts.dir !== 'rl')
                $.error('Direction must be either: "lr" or "rl"');
            var bracket = JqueryBracket(opts);
            $(this).data('bracket', { target: that, obj: bracket });
            return bracket;
        },
        data: function () {
            var bracket = $(this).data('bracket');
            return bracket.obj.data();
        }
    };

    $.fn.bracket = function (method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === 'object' || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error('Method ' + method + ' does not exist on jQuery.bracket');
        }
    };
})(jQuery);

</script>

<script>
/**
 * brackets.js
 */

$(function() {

  $.ajaxSetup({
    headers: {
      'X-CSRF-Token': $('meta[name="csrf-token"]').attr('content')
    }
  });

  var teams = [
    ['1 Kentucky', '16 Hampton/Manhattan'],
    ['8 Cincinnati', '9 Purdue'],
    ['5 West Virginia', '12 Buffalo'],
    ['4 Maryland', '13 Valparaiso'],

    ['6 Butler', '11 Texas'],
    ['3 Notre Dame', '14 Northeastern'],
    ['7 Wichita State', '10 Indiana'],
    ['2 Kansas', '15 New Mexico State'],
    ['1 Villanova', '16 Lafayette'],
    ['8 NC State', '9 LSU'],
    ['5 UNI', '12 Wyoming'],
    ['4 Louisville', '13 UC Irvine'],
    ['6 Providence', '11 Boise State/Dayton'],
    ['3 Oklahoma', '14 Albany'],
    ['7 Michigan State', '10 Georgia'],
    ['2 Virginia', '15 Belmont'],
    ['1 Wisconsin', '16 Coastal Caro.'],
    ['8 Oregon', '9 Oklahoma State'],
    ['5 Arkansas', '12 Wofford'],
    ['4 North Carolina', '13 Harvard'],
    ['6 Xavier', '11 BYU/Mississippi'],
    ['3 Baylor', '14 Georgia State'],
    ['7 VCU', '10 Ohio State'],
    ['2 Arizona', '15 Texas Southern'],
    ['1 Duke', '16 UNF/RMU'],
    ['8 San Diego State', '9 St. John\'s'],
    ['5 Utah', '12 Steph F. Austin'],
    ['4 Georgetown', '13 Eastern Washington'],
    ['6 SMU', '11 UCLA'],
    ['3 Iowa State', '14 UAB'],
    ['7 Iowa', '10 Davidson'],
    ['2 Gonzaga', '15 North Dakota St.']

  ];

  var saveData = {
    teams: teams
  };

  var container = $('#brackets');
  container.bracket({
    init: saveData,
    save: function() {},
    skipConsolationRound: true
  });

  $('.bracket .label').each(function() {
    var $el = $(this);
    $el.attr('title', $el.text());
  });

  // Add default option to list of organizations
  $('#bracket_organization_id').prepend($('<option value="0">Select an organization</option>'));
  $('#bracket_organization_id').val('0');

  //toastr.options = {
  //  positionClass: 'toast-top-center'
  //};
  $('#save').click(function() {
    var numTeams = teams.length * 2;
    var maxMatchId = numTeams * 2 - 2;

    var picksById = {};
    $('.score').each(function() {
      var $el = $(this);
      var resultId = $el.attr('data-resultid');
      var pickId = parseInt(resultId.match(/result-(\d+)/)[1], 10);
      if (pickId < numTeams || pickId >= maxMatchId) {
        return;
      }

      var teamId = $el.parent().attr('data-teamid');//$el.prev().text();
      if (!teamId) {
        return;
      }
      picksById[pickId] = teamId;

      if ($el.next().is('.team.win .bubble')) {
        // Overall winner
        picksById[maxMatchId] = teamId;
      }
    });

    for (i = numTeams; i <= maxMatchId; ++i) {
      if (!(i in picksById)) {
        toastr.error('Please fill out the entire bracket before saving');
        return;
      }
    }

    var orgVal = $('#bracket_organization_id').val();
    if (orgVal === '0') {
      toastr.error('Please select an organization');
      return;
    }
    picksById.organization_id = orgVal;

    $.ajax({
      method: 'POST',
      url: '/brackets',
      data: {
        bracket: picksById
      },
      success: function() {
        toastr.success('Bracket saved. Redirecting to home page...');
        setTimeout(function() {
          window.location.href = '/';
        }, 2000);
      },
      failure: function() {
        toastr.error('Error saving bracket. Talk to Helen.')
      }
    });
  });
});
    </script>
  </head>
  <body>
    <div id="brackets"></div>

    <%= form_for @bracket do |f| %>
      <%= f.collection_select :organization_id, Organization.all, :id, :name %>
    <% end %>
    <button id="save">Save</button>
  </body>
</html>
